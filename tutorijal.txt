1.1: Introduction - Git and GitHub for Poets
Git = version control software.
GitHub = web service gde i na kom mozes da radis i cuvas projekte koje imaju version control.
Neko moze da koristi samo Git, a da nikad ne upotrebi GitHub, i obrnuto, a mi cemo da budemo negde u middle-u.
 -> Repository = "repo",
 -> Commit = "save", dakle promenicu fajl i uraditi commit. I sada imamo dole "commit changes" gde mozemo upisati promene koje smo uneli
"1 parent 1006b47 commit f2aa61f9de84b5a3beafca36efbfe2a16f985a3f" - commit hash tj na ovo nailazimo udjemo na neku promenu iz istorije, pa sa strane svaka promena ima svoj jedinstveni ID tk ovaj apstraktni broj.

Zakljucak tj review prvog dela:
Git je version control, a GitHub je vebsajt gde mozes da kreiras projekte i nad njima da imas kontrolu verzije. Mozes da napravis skladiste/magacin (repositoty) ili dodas fajlove u skladiste, potom mozes da uneses promene u ove fajlove tako sto ucinimo "commit" (uraditi, izvrsiti, predati), a commit nam dozvoljava pregled istorije, a svaki od ovih commita ima svoj unikatni identifikator tj commit hash


1.2: Branches - Git and GitHub for Poets
 -> Branches (grana/ogranak/granati se/racvati se/filijale/predstavnistvo) = ovo je kao neko grananje, tipa glavni branch mu dodje master (ovo se moze promeniti), ali ako hocemo da na taj master dodamo neki deo, koji ne zelimo (odmah) da metnemo na master vec na odvojen deo, pravimo novi branch (Jednorog) koji graficki prikazano izgleda kao da se master grana...i ukoliko shvatimo da nam se taj odvojen deo svidja i zelimo da ga i zvanicno stavimo u gl branch tj master, to i mozemo. Ono sto hocemo sa Jednorogom jeste: hoces li da uzmes moje promene i odneses tj pullujes/povuces ih u master. Kada se vratimo u main folder coderawii/Rainbow-Poem pojavljuje se:  jednorog (9 minutes ago) i pored dugme Compare and Pull Request. Kliknucemo to, upisemo tamo sta radimo kao opis neki i pull requestujemo, tj zahtev da spojimo/stopimo/integrisemo promene koje napravih u Jednorogu, nazad u master granu
 -> Pull request = uzmi neke promene iz posebnog/specificnog brancha/grane i dovedi ih u neki drugi branch
 -> Merge


1.3: Forks and Pull Requests - Git and GitHub for Poets
Kako neko ko nije ja moze da doprinese ovom projektu, ovo se ugl desava sa source kodom, kada neko hoce da vidi i sredi bagove, ili predlozi neku promenu, itd.
 -> Fork (viljuska, vile) - recimo neko drugi je na github napravio skladiste koje recimo ja sad hocu da "preuzmem" kod sebe, i radim na njemu, a da ne uticem na originalan, tj onog ciji je. Onda ga forkujemo, tj nesto slicno poput klona ALI NIJE CLONE jer za to postoji posebna komanda clone.   
 -> Pull request = i sad recimo na tom repo-u koji smo forkovaliu od nekog, napravimo raznorazne grane tj branches, i sad mi se jedna koju sam napravila toliko svidja, da zelim da je integrisem u originalnu verziju, tj kod onog od kog forkovah, dakle saljem mu pull request, i onda taj moze ili da odbije ili da prihvati, nije push, jer zelimo da taj neko pulluje ovo sto smo napravili.


1.4: GitHub Issues - Git and GitHub for Poets
Napravili smo kao neki svoj issues. Postoje markdown-ovi, tj ta kao neka posebna syntaxa, tipa za linkove: [text linka](link), za boldovano: **bolnovani text**, itd.I issues je open sve dok se ne resi, tj dok se ne close, zato imamo: 1 open, 0 close. I samo onaj ko je kreirao ovaj issue, ili vlasnik repo-a moze da zatvori issue. U ovom slucaju napravili smo issues, mi licno, kod nas licno, ali mozemo da napravimo issues kod bilo koga. I recimo da sad hocu da resim issue, Odlazim u Rainbow-Poem, u poem.txt, dodajem to nesto za Dan Zemlje, a u opis promene stavljam "Dodajem Dan Zemlje za #3" tj broj issue-a, svaki issue ima svoj id br. cak i kada se u issue klikne na taj njegov br (ili na sam taj issue) u url-u isti taj br bude. I tako smo kreiraili neku promenu koja se dodavanjem u opis promene #idIssuea automatski dodala, i mozemo posle posenim klikom da je zatvorimo close issue.
Ali postoji i key words da se automatski zatvori issue za specificnim commitom. Idemo nazad u poemu i editujemo sa "Ja volim Zemlju" i sa posebnim commit opisom gde stavljamo kljucnu rex "fixes" i id issue-a #3, automatski se zatvara ovaj issue i tamo pojavljuje ovo: coderawii closed this in 7f18b5a just now. To je kao neka referenca na odredjeni commit, posto znamo da svakiu commit ima svj identifikacioni broj.
Sad cemo da napravimo novi issue da nismo sigurni u vezi sa promenom #3 issue-a i zatvaranja istog. I za komentar staviti bla bla i paste-ovati taj commit hush u kojoj je ta promena sa kojom se bas i ne slazemo. I onda se automatski napravi kao neki linkic iliti referenca na tu promenu kada submitujemo, dakle iz "5cbd81b60a799bd38f75b1d6055110b760ccc729" u "5cbd81b"
